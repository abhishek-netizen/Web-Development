https://www.frontendmentor.io/challenges
https://ghughes13.com/

Three important properties control the space that surrounds each HTML element: padding, border, and margin

id always overrides the class.
inline style overrides id.
!important overrides all


css variable: 
--penguin-skin: gray;
background: var(--penguin-skin, black);

Inherit CSS Variables:
:root {
    /* Only change code below this line */
    --penguin-belly:pink;
    /* Only change code above this line */
  }

tags:
strong - to make test bold.
u- underline
em-italic
s-strikethrough
<hr>

The box-shadow property takes values for

offset-x (how far to push the shadow horizontally from the element),
offset-y (how far to push the shadow vertically from the element),
blur-radius,
spread-radius and
color, in that order.
The blur-radius and spread-radius values are optional.

opacity 
text-transform
line-height

a:hover{ 
color:red;     # concept of psudo class 
}

 normal flow

relative
absolute
fixed positioning
sticky

float:left
z-index - 2
z-index - 1

margim-auto - center

hsl(0, 100%, 50%) hue(0-360) saturation(amt of gry) lightness(0%b 100%w))

background: linear-gradient(90deg, red, yellow)
background: repeating-linear-gradient(45deg, red 0px, blue 40px)
background: url("https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png")

transform: scale(1.5)

a:hover{ 
transform: scale(3) 
}

transform: skewX(-32deg);

::before{ } insert something before.
::after { } insert soemthing after.


animation:

  #rect {
    animation-name: rainbow;
    animation-duration: 10s;

  }
@keyframes rainbow {
   0%{ 
     background-color: blue;
   }
   50%{ 
      background-color: green;
   }
   100%{ 
     background-color: yellow;
   }
}

animation-fill-mode: forwards;

animation-iteration-count: infinite;

animation-duration: 1.1s;

animation-timing-function

animation-timing-function: cubic-bezier(0, 0, 0.58, 1);
x1,y1x2,y2
animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);

main, header, footer, nav, article, and section

<div> - groups content
<section> - groups related content
<article> - groups independent, self-contained content

<source src="https://s3.amazonaws.com/freecodecamp/screenreader.mp3" type="audio/mpeg"/>

<audio id="meowClip" controls>
  <source src="audio/meow.mp3" type="audio/mpeg" />
  <source src="audio/meow.ogg" type="audio/ogg" />
</audio>

<figure>
  <img src="roundhouseDestruction.jpeg" alt="Photo of Camper Cat executing a roundhouse kick">
  <br>
  <figcaption>
    Master Camper Cat demonstrates proper form of a roundhouse kick.
  </figcaption>
</figure>

fieldset

<label for="input1">Enter a date:</label>
<input type="date" id="input1" name="input1">

<time datetime="2016-08-13T20:01Z">August 13<sup>th</sup></time></p>

Hide from the normal and visualize to the screen reader.
.sr-only {
  position: absolute;
  left: -10000px;
  width: 1px;
  height: 1px;
  top: auto;
  overflow: hidden;
}

hsl() property (which stands for hue, saturation, lightness) 

HTML offers the accesskey attribute to specify a shortcut key to activate or bring focus to an element. This can make navigation more efficient for keyboard-only users

tabindex="0"


Here's an example of a media query that returns the content when the device's width is less than or equal to 100px:

@media (max-width: 100px) { /* CSS Rules */ }

and the following media query returns the content when the device's height is more than or equal to 350px:

@media (min-height: 350px) { /* CSS Rules */ }

.responsive-img {
max-width:100%;
height:auto;
}

Pixel Per Inch(PPI) or Dots Per Inch(DPI). 

The four different viewport units are:

vw (viewport width): 10vw would be 10% of the viewport's width.
vh (viewport height): 3vh would be 3% of the viewport's height.
vmin (viewport minimum): 70vmin would be 70% of the viewport's smaller dimension (height or width).
vmax (viewport maximum): 100vmax would be 100% of the viewport's bigger dimension (height or width).
Here is an example that sets a body tag to 30% of the viewport's width.

body { width: 30vw; }

First, there are the visual elements, such as colors, fonts, and images. Second, there is the placement or positioning of those elements.
CSS3 introduced Flexible Boxes, or flexbox, to create page layouts for a dynamic UI
FLEX:

display:flex;         Other options for flex-direction are row-reverse and column-reverse.
flex-direction: row;
flex-direction: column;

Creating a row will align the children horizontally, and creating a column will align the children vertically.
justify-content: flex-start justify-content flex-end space-between space-around space-evenly

flex-start flex-end center stretch baseline

flex-wrap: wrap; nowrap wrap-reverse

flex-shrink: 1;
flex-shrink: 10;

flex-grow:2; - oppo of shrink

flex-basis:10em;

For example, flex: 1 0 10px; will set the item to flex-grow: 1;, flex-shrink: 0;, and flex-basis: 10px;.
The default property settings are flex: 0 1 auto;.

 order:1;

common adjustment techniques using the CSS properties float, clear, and vertical-align do not work on flex items

align-self accepts the same values as align-items and will override any value set by the align-items property.

 align-self: center; align-self:flex-end;

CSS-GRID:
CSS Grid helps you easily build complex web designs. It works by turning an HTML element into a grid container with rows and columns for you to place children elements where you want within the grid.

grid-template-columns: 100px 100px 100px; which will add 3 rows of 100px
 grid-template-rows: 50px 50px; 2 rows of 50px


 Use CSS Grid units to Change the Size of Columns and Rows::
fr: sets the column or row to a fraction of the available space,

auto: sets the column or row to the width or height of its content automatically,

%: adjusts the column or row to the percent width of its container.

grid-column-gap: 20px; to have some space in col
grid-row-gap: 5px; row
    grid-gap: 10px 20px; shortand value for the above, first value is rows and second is column.

To control the amount of columns an item will consume, you can use the grid-column property in conjunction with the line numbers you want the item to start and stop at.

grid-column: 1 / 3; start at first column move till 3rd.
grid-row: 2/ 4;

This will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.
    justify-self: center;

align-self: end; align item vertically
justify-items: center;
align-items: end; vertically

Divide the Grid Into an Area Template:
grid-template-areas:
  "header header header"
  "advert content content"     if you place . period then it will become empty cell.
  "footer footer footer";

 grid-area: footer;

Use grid-area Without Creating an Areas TemplatePassed
grid-area: 1/1/2/4 grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;

grid-template-columns: 100px minmax(50px, 200px);

grid-template-columns: repeat(3, 1fr);

grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));  auto_fill-as many rows as you want.

grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));

grid-template-areas:
      "header header"
      "advert content"
      "footer footer";
   }